# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet arg_options "shell argument options" b

BASENAME=$(basename $0)

usage() {
cat << EOS
	Usage:
	$BASENAME [OPTIONS]

	OPTIONS:
	  -h, --help: show help.
EOS
}

if [[ $# -lt 2 ]]; then
  usage
  exit 1
fi

for OPT in "$@"
do
  case "$OPT" in
    "-h" | "--help" )
      usage
      exit 1
    ;;
    -${2} | --${3} )
      if [[ -z "\$2"  ]] || [[ "\$2" =~ ^-+  ]]; then
        echo "$BASENAME: option \$1 requires on argument" 1>&2
        exit 1
      fi
      PROFILE=\$2
      shift 2
    ;;
    "--debug")
      DEBUG=true
      shift 1
    ;;
    *)
      if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
          #param=( ${param[@]} "$1" )
          param+=( "$1" )
          shift 1
      fi
    ;;
  esac
done
endsnippet

snippet dryrun_cmd "dryrun: if enable only echo" b
if [[ -z ${1:$DRYRUN} ]]; then
  cmd=''
else
 cmd="echo DEBUG "
fi
endsnippet

snippet valid_dfmt "valid date format (YYYY-MM-DD). (using GNU date, Not Mac)" b
if [[ ${1:date_str}  =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && date "+%Y-%m-%d" -d ${1:date_str} > /dev/null 2>&1
then
  ${2:valid code}
else
  ${3:invalid code}
fi
endsnippet
