"============= LightLine settings ==============
" vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste'],
      \             [ 'cocstatus', 'session_state', 'fugitive', 'gitgutter', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'gitgutter': 'MyGitGutter',
      \   'session_state': 'ObsessionStatus',
      \   'mode': 'MyMode',
      \   'cocstatus': 'coc#status',
      \ },
      \ 'separator': { 'left': "⮀", 'right': "⮂"  },
      \ 'subseparator': {'left': '⮁', 'right': '⮃'}
      \ }

let g:lightline.mode_map = {
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'R',
      \ 'v' : 'V',
      \ 'V' : 'V-L',
      \ "\<C-v>": 'V-B',
      \ 'c' : 'C',
      \ 's' : 'S',
      \ 'S' : 'S-L',
      \ "\<C-s>": 'S-B',
      \ 't': 'TERM',
      \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction
function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
           \ (
           \ '' != fnamemodify(expand('%'),':.') ? fnamemodify(expand('%'),':.') : '[No Name]') .
           \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let branch = fugitive#head()
      return branch == '' ? '' : '⭠ '.branch
    endif
  catch
  endtry
    return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction
function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction
function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction
function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" カーソルの位置を復元する
if has("autocmd")
  augroup redhat
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
    " git commitのカーソル位置は常に最初
    autocmd VimEnter FIleType gitcommit normal! gg0
    autocmd VimEnter COMMIT_EDITMSG  normal! gg0
  augroup END
endif

" ==============terminal setting==========
if has("nvim")
  let g:terminal_color_0  = "#1b2b34" "black
  let g:terminal_color_1  = "#ed5f67" "red
  let g:terminal_color_2  = "#9ac895" "green
  let g:terminal_color_3  = "#fbc963" "yellow
  let g:terminal_color_4  = "#669acd" "blue
  let g:terminal_color_5  = "#c695c6" "magenta
  let g:terminal_color_6  = "#5fb4b4" "cyan
  let g:terminal_color_7  = "#c1c6cf" "white
  let g:terminal_color_8  = "#65737e" "bright black
  let g:terminal_color_9  = "#fa9257" "bright red
  let g:terminal_color_10 = "#343d46" "bright green
  let g:terminal_color_11 = "#4f5b66" "bright yellow
  let g:terminal_color_12 = "#a8aebb" "bright blue
  let g:terminal_color_13 = "#ced4df" "bright magenta
  let g:terminal_color_14 = "#ac7967" "bright cyan
  let g:terminal_color_15 = "#d9dfea" "bright white
  let g:terminal_color_background="#1b2b34" "background
  let g:terminal_color_foreground="#c1c6cf" "foreground
endif

" ===============Goyo Settig===============
let g:goyo_width = '100%'
let g:goyo_height = '100%'
let g:goyo_linenr = 1

" Goyoに入ったときに実行する
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  Goyo 100%
  set noshowmode
  set noshowcmd
  Limelight
  "set scrolloff=999
endfunction
function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 240
" let g:limelight_conceal_ctermfg = 'gray'
" Color name (:help gui-colors) or RGB color
" let g:limelight_conceal_guifg = '#777777'
" Default: 0.5
" let g:limelight_default_coefficient = 1

" Number of preceding/following paragraphs to include (default: 0)
" let g:limelight_paragraph_span = 1

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" indent setting
augroup fileTypeIndent
  autocmd!
  autocmd BufNewFile,BufRead *.jbuilder   set filetype=ruby
  autocmd BufNewFile,BufRead Guardfile    set filetype=ruby
  autocmd BufNewFile,BufRead Gemfile      set filetype=ruby
  autocmd BufNewFile,BufRead Gemfile.lock set filetype=ruby
  autocmd BufNewFile,BufRead .pryrc       set filetype=ruby
  autocmd BufNewFile,BufRead *spec.rb if exists("g:loaded_rails") && g:loaded_rails == 1 | set syntax=ruby | endif
  " ?つきメソッド、@@インスタンスを単語とみなす
  autocmd FileType ruby   setlocal isk+=@-@,?,!
  autocmd FileType eruby  setlocal isk+=@-@,?,!
  autocmd FileType slim   setlocal isk+=@-@,?,!
  autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType blade  setlocal tabstop=2 softtabstop=2 shiftwidth=2
  autocmd FileType php    setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType java   setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType groovy setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType go     setlocal tabstop=4 softtabstop=4 noexpandtab   shiftwidth=4
augroup END

autocmd FileType git* setlocal foldlevel=99

" Automatic rename of tmux window
if exists('$TMUX') && !exists('$NORENAME')
  au BufEnter * if empty(&buftype) | call system('tmux rename-window "[vim]"'.expand('%:t:S')) | endif
  au VimLeave * call system('tmux set-window automatic-rename on')
endif

" ----------- matchup plugin setting ---------------
hi MatchParen ctermfg=166 guifg=darkorange2 cterm=italic gui=italic
hi MatchParenCur cterm=NONE gui=NONE
hi MatchWord ctermfg=166 guifg=darkorange2 cterm=NONE gui=NONE
hi MatchWordCur cterm=underline gui=underline

" ----------- highlightedyank setting ----------------
let g:highlightedyank_highlight_duration = 500
hi HighlightedyankRegion ctermbg=22 guibg=#005f00

" ------------vim-illuminate setting-----------------
hi illuminatedWord ctermbg=239 guibg=Gray30
let g:Illuminate_highlightUnderCursor = 0
let g:Illuminate_delay = 800

" -------------------vim-go-----------------------
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_fields = 1
" let g:go_fmt_command = "goimports"
