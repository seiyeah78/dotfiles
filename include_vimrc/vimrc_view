if has('nvim-0.5')
lua << EOF
  require'nvim-treesitter.configs'.setup {
    ensure_installed = "all", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
    ignore_install = { "haskell" },
    highlight = {
      enable = true,          -- false will disable the whole extension
      disable = {
        'lua',
        'ruby',
        'toml',
        'c_sharp',
        'vue',
        'bash',
        'haskell',
        'yaml',
        'python'
      }
    },
    indent = {
      enable = true,
      disable = {
        'python'
      }
    }
  }
EOF
endif
"============= LightLine settings ==============
" vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'

let g:lightline = {
      \ 'colorscheme': 'nightowl',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste'],
      \             [ 'cocstatus', 'sessionState', 'fugitive', 'gitgutter', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileEncoding',
      \   'lineinfo': 'MyLineInfo',
      \   'percent': 'MyPercent',
      \   'gitgutter': 'MyGitGutter',
      \   'sessionState': 'ObsessionStatus',
      \   'mode': 'MyMode',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

let g:lightline.mode_map = {
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'R',
      \ 'v' : 'V',
      \ 'V' : 'V-L',
      \ "\<C-v>": 'V-B',
      \ 'c' : 'C',
      \ 's' : 'S',
      \ 'S' : 'S-L',
      \ "\<C-s>": 'S-B',
      \ 't': 'TERM',
      \ }

let g:VM_theme = 'iceblue'

function! IsNotFiles()
  return &ft =~? 'vimfiler\|gundo\|nerdtree\|fugitive.*'
endfunction
function! IsShowStatus(length)
  return winwidth(0) > a:length && !IsNotFiles()
endfunction
function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
endfunction
function GetFilename()
  let filename = '[No Name]'
  if('' != fnamemodify(expand('%'),':.'))
    if(IsNotFiles())
      let filename = &ft
    else
      let filename = fnamemodify(expand('%'),':.')
      let r = split(filename,'/')
      if (winwidth(0) <= 90 && len(r) > 3)
        let short_name = r[:1]
        call add(short_name, '...')
        call add(short_name, r[-1])
        let filename = join(short_name, '/')
      endif
    end
  endif
  return filename
endfunction
function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
           \ GetFilename() .
           \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
function! MyFugitive()
  let branch = ''
  if (winwidth(0) > 140)
    try
      if &ft !~? 'vimfiler\|gundo' && (exists('*fugitive#head') || exists('*FugitiveHead'))
        let branch = fugitive#head()
        let branch = branch == '' ? '' : ' '.branch
      endif
    catch
    endtry
  endif
  return branch
endfunction

function! MyFileformat()
  return IsShowStatus(70) ? &fileformat : ''
endfunction
function! MyFiletype()
  return IsShowStatus(70) ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction
function! MyFileEncoding()
  return IsShowStatus(70) ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction
function! MyLineInfo()
  return IsShowStatus(70) ? printf("%3d:%-2d", line('.'), col('.')) : ''
endfunction
function! MyPercent()
  return IsShowStatus(70) ? (100 * line('.') / line('$')) . '%' : ''
endfunction
function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" カーソルの位置を復元する
if has("autocmd")
  augroup redhat
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
    autocmd FileType pullrequest normal! gg0
    autocmd FileType gitcommit normal! gg0
    autocmd VimEnter COMMIT_EDITMSG  normal! gg0
  augroup END
endif

" ==============terminal setting==========
if has("nvim")
  let g:terminal_color_0  = "#1b2b34" "black
  let g:terminal_color_1  = "#ed5f67" "red
  let g:terminal_color_2  = "#9ac895" "green
  let g:terminal_color_3  = "#fbc963" "yellow
  let g:terminal_color_4  = "#669acd" "blue
  let g:terminal_color_5  = "#c695c6" "magenta
  let g:terminal_color_6  = "#5fb4b4" "cyan
  let g:terminal_color_7  = "#c1c6cf" "white
  " let g:terminal_color_8  = "#65737e" "bright black
  " let g:terminal_color_9  = "#fa9257" "bright red
  " let g:terminal_color_10 = "#343d46" "bright green
  " let g:terminal_color_11 = "#4f5b66" "bright yellow
  " let g:terminal_color_12 = "#a8aebb" "bright blue
  " let g:terminal_color_13 = "#ced4df" "bright magenta
  " let g:terminal_color_14 = "#ac7967" "bright cyan
  " let g:terminal_color_15 = "#d9dfea" "bright white
  let g:terminal_color_background="#1b2b34" "background
  let g:terminal_color_foreground="#c1c6cf" "foreground
endif

" ===============Goyo Settig===============
let g:goyo_width = '60%'
let g:goyo_height = '80%'
let g:goyo_linenr = 1

" Goyoに入ったときに実行する
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  " Goyo 100%
  set noshowmode
  set noshowcmd
  set relativenumber
  let g:tmp_scrolloff = &scrolloff
  set scrolloff=999
  let term_name = has('termguicolors') ? 'guibg' : 'ctermbg'
  exec 'hi Normal '.term_name.'='.g:default_bg
  Limelight
endfunction
function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showcmd
  set norelativenumber
  exec 'set scrolloff='.g:tmp_scrolloff
  hi Normal ctermbg=NONE guibg=NONE
  Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 255

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'black'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 0

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
" let g:limelight_bop = '^\s'
" let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" indent setting
augroup fileTypeIndent
  autocmd!
  autocmd BufNewFile,BufRead *.jbuilder   set filetype=ruby
  autocmd BufNewFile,BufRead Guardfile    set filetype=ruby
  autocmd BufNewFile,BufRead Gemfile      set filetype=ruby
  autocmd BufNewFile,BufRead Gemfile.lock set filetype=ruby
  autocmd BufNewFile,BufRead .pryrc       set filetype=ruby
  " ?つきメソッド、@@インスタンスを単語とみなす
  autocmd FileType eruby  setlocal isk+=@-@,?,!
  autocmd FileType slim   setlocal isk+=@-@,?,!
  autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType blade  setlocal tabstop=2 softtabstop=2 shiftwidth=2
  autocmd FileType php    setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType java   setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType groovy setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd FileType go     setlocal tabstop=4 softtabstop=4 noexpandtab   shiftwidth=4
augroup END

augroup flowLevelSetting
  autocmd!
  autocmd FileType git* setlocal foldlevel=99
  autocmd BufNewFile,BufRead,BufEnter *Agit* if !empty(matchstr(expand('%:t'), "Agit")) | setlocal foldlevel=99 | endif
augroup END

" Automatic rename of tmux window
if exists('$TMUX') && !exists('$NORENAME')
  au BufEnter * if empty(&buftype) | call system('tmux rename-window "[vim]"'.expand('%:t:S')) | endif
  au VimLeave * call system('tmux set-window automatic-rename on')
endif

" ----------- matchup plugin setting ---------------
let g:matchup_matchparen_deferred = 1
" let g:matchup_matchparen_hi_surround_always = 1
hi MatchParen ctermfg=166 guifg=darkorange2 cterm=italic gui=italic
hi MatchParenCur cterm=NONE gui=NONE
hi MatchWord ctermfg=166 guifg=darkorange2 cterm=NONE gui=NONE
hi MatchWordCur cterm=underline gui=underline

" ----------- highlightedyank setting ----------------
let g:highlightedyank_highlight_duration = 500
hi HighlightedyankRegion ctermbg=22 guibg=#005f00

" ------------vim-illuminate setting-----------------
hi illuminatedWord ctermbg=239 guibg=Gray30
let g:Illuminate_highlightUnderCursor = 0
let g:Illuminate_delay = 800

" indent-blankline
" like VSCode indent-rainbow
hi IndentBlanklineChar1 guibg=#4E5F00 guifg=#788898 blend=nocombine
hi IndentBlanklineChar2 guibg=#005A00 guifg=#788898 blend=nocombine
hi IndentBlanklineChar3 guibg=#53005C guifg=#788898 blend=nocombine
hi IndentBlanklineChar4 guibg=#004B4F guifg=#788898 blend=nocombine
hi IndentBlanklineSpaceChar1 guibg=#4E5F00 blend=nocombine
hi IndentBlanklineSpaceChar2 guibg=#005A00 blend=nocombine
hi IndentBlanklineSpaceChar3 guibg=#53005C blend=nocombine
hi IndentBlanklineSpaceChar4 guibg=#004B4F blend=nocombine

" let g:indent_blankline_char = ' '
let g:indent_blankline_char = '▏'
let g:indent_blankline_space_char_blankline = " "
let g:indent_blankline_show_trailing_blankline_indent = v:false
let g:indent_blankline_char_highlight_list = ['IndentBlanklineChar1', 'IndentBlanklineChar2', 'IndentBlanklineChar3', 'IndentBlanklineChar4']
let g:indent_blankline_space_char_highlight_list = ['IndentBlanklineSpaceChar1', 'IndentBlanklineSpaceChar2', 'IndentBlanklineSpaceChar3', 'IndentBlanklineSpaceChar4']
