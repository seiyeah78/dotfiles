" ランタイムを読み込む
set rtp+=/usr/local/opt/fzf

" This is the default extra key bindings
" fzf中に実行できるコマンド
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-g': 'tabnew'}

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = {'down': '~40%' }
" In Neovim, you can set up fzf window using a Vim command

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <C-f><C-w> <plug>(fzf-complete-word)
" Fileパスをfileコマンドでcomp
" imap <C-f><C-p> <plug>(fzf-complete-path)
" Fileパスをagコマンドでcomp
imap <C-f><C-p> <plug>(fzf-complete-file-ag)
imap <C-f><C-l> <plug>(fzf-complete-line)

" Agコマンドで検索する
nnoremap <silent> <Leader>ag  :Ag <C-R><C-W><CR>
nnoremap <silent> <Leader>AG  :Ag <C-R><C-A><CR>
xnoremap <silent> <Leader>ag  y:Ag <C-R>"<CR>

" Rgコマンドで検索する
nnoremap <silent> <Leader>rg  :Rg <C-R><C-W><CR>
nnoremap <silent> <Leader>RG  :Rg <C-R><C-A><CR>
xnoremap <silent> <Leader>rg  y:Rg <C-R>"<CR>

" :Filesによる表示の変更
let g:fzf_files_options =
      \ '--tiebreak=end,index --preview "(pygmentize -g {-1} || rougify {-1} || ccat {-1} || cat {-1}) 2> /dev/null | head -'.&lines.'"'

autocmd VimEnter * nnoremap <silent><expr><Leader>F (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":FilesMru\<cr>"
autocmd VimEnter * nnoremap <silent><expr><C-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":FilesMru\<cr>"

":Colorsによる表示の変更
autocmd VimEnter * command! -bang Colors
  \ call fzf#vim#colors({'left': '~15%', 'options': '--reverse --margin 20%,0'}, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"   * Preview script requires Ruby
"   * Install Highlight or CodeRay to enable syntax highlighting
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?"
"   key
"   :Ag! - Start fzf in fullscreen and display the preview window above

" プロンプト表示を「コマンド名（検索文字列）> 」みたいにする
function! s:exec_grep_command(arg, is_bang, command_name)
  let fzf_options = {'options': ''}
  let cul_dir = ' (' . getcwd() . ') '

  if !empty(a:arg)
    let fzf_options.options .= ' --prompt="'.a:command_name. cul_dir. '['.a:arg.']> "'
  else
    let fzf_options.options .= ' --prompt="'.a:command_name. cul_dir. '> "'
  endif

  if a:is_bang
    let fzf_options = fzf#vim#with_preview(fzf_options, 'up:60%')
  else
    let fzf_options = fzf#vim#with_preview(fzf_options, 'right:50%:hidden', '?')
  end

  if a:command_name == 'Ag'
    call fzf#vim#ag(a:arg, fzf_options, a:is_bang)
  else
    call fzf#vim#grep(
      \  'rg --column --line-number --hidden --no-heading --color=always '.shellescape(a:arg),
      \  1,
      \  fzf_options,
      \  a:is_bang)
  endif
endfunction

autocmd VimEnter * command! -bang -nargs=* Ag call s:exec_grep_command(<q-args>, <bang>0, 'Ag')
autocmd VimEnter * command! -bang -nargs=* Rg call s:exec_grep_command(<q-args>, <bang>0, 'Rg')

" command for git grep
" fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

function! s:tags_sink(line)
  let parts = split(a:line, '\t\zs')
  let excmd = matchstr(parts[2:], '^.*\ze;"\t')
  execute 'silent e' parts[1][:-2]
  let [magic, &magic] = [&magic, 0]
  execute excmd
  let &magic = magic
endfunction

function! s:tags()
  if empty(tagfiles())
    echohl WarningMsg
    echom 'Preparing tags'
    echohl None
  endif
  " 優先度の高いtagfileだけ使う
  let tagfile = tagfiles()[0]
  " let proc = 'perl -ne ''unless (/^\!/) { s/^(.*?)\t(.*?)\t/'.s:yellow('\1', 'Function').'\t'.s:blue('\2', 'String').'\t/; print }'' '
  let copt = '--ansi '

  call fzf#run({
  \ 'source':  'cat '.join(map(tagfiles(), 'fnamemodify(v:val, ":S")')).
  \            '| grep -v -a ^!',
  \ 'options': copt.'+m -d "\t" --with-nth 1,2,4.. -n 1 --tiebreak=index --prompt "Tags> "'.s:q(a:query)',
  \ 'down':    '40%',
  \ 'sink':    function('s:tags_sink')})
endfunction
command! TTags call s:tags()

" ------------- 引数の内容を無名レジスタにコピー---------"
function! s:add_latest_register(line)
  let @" = a:line
  echomsg "Add Register!!"
endfunction

command! -nargs=* BacklogIssues call fzf#run({
  \ 'source': 'ruby -S backlog_access.rb myissue',
  \ 'options': '--ansi ',
  \ 'down':    '40%',
  \ 'sink': function('s:add_latest_register')
  \ })

function! s:yank_list()
  redir => ys
  silent Yanks
  redir END
  return split(ys, '\n')[1:]
endfunction

function! s:yank_handler(reg)
  if empty(a:reg)
    echo "aborted register paste"
  else
    let token = split(a:reg, ' ')
    execute 'Paste' . token[0]
  endif
endfunction

command! FZFYank call fzf#run({
\ 'source': <sid>yank_list(),
\ 'sink': function('<sid>yank_handler'),
\ 'options': '-m --prompt="FZFYank> "',
\ 'down':    '40%'
\ })

nnoremap <C-Y><C-Y> :<C-U>FZFYank<CR>
