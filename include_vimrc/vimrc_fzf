" ランタイムを読み込む
set rtp+=/usr/local/opt/fzf

" This is the default extra key bindings
" fzf中に実行できるコマンド
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-g': 'tabnew'
  \ }

" Default fzf layout
" - down / up / left / right
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': $FZF_TMUX_OPTS }
else
  " let g:fzf_layout = { 'down': '~40%' }
  let g:fzf_layout = { 'window': { 'width': 0.7, 'height': 0.5 } }
endif

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <C-x><C-w> <plug>(fzf-complete-word)
" Fileパスをfileコマンドでcomp
" imap <C-x><C-p> <plug>(fzf-complete-path)
" Fileパスをagコマンドでcomp
imap <C-x><C-p> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)

" Agコマンドで検索する
nnoremap <silent> <leader>ag  :Ag <C-R><C-W><CR>
nnoremap <silent> <leader>AG  :Ag <C-R><C-A><CR>
xnoremap <silent> <leader>ag  y:Ag <C-R>"<CR>

" Rgコマンドで検索する
nnoremap <silent> <leader>rg  :Rg <C-R><C-W><CR>
nnoremap <silent> <leader>RG  :Rg <C-R><C-A><CR>
xnoremap <silent> <leader>rg  y:Rg <C-R>"<CR>

" :Filesによる表示の変更
let g:fzf_files_options = '-i --tiebreak=end,index ' .$FZF_PREVIEW_OPTS
let g:fzf_buffers_jump = 1

autocmd VimEnter * nnoremap <silent><expr><leader>F (expand('%') =~ 'NERD_tree' ? "\<C-W>\<C-W>" : '').':FilesMru'.(!empty(expand('<cword>')) ? '--query='.expand('<cword>') : '').'<CR>'
autocmd VimEnter * nnoremap <silent><expr><C-P> (expand('%') =~ 'NERD_tree' ? "\<C-W>\<C-W>" : '').":FilesMru<CR>"
autocmd VimEnter * nnoremap <leader>b :<C-U>Buffers<CR>
if(has('nvim'))
  autocmd FileType fzf tunmap <ESC>
endif

":Colorsによる表示の変更
autocmd VimEnter * command! -bang Colors
  \ call fzf#vim#colors({'left': '~15%', 'options': '--reverse --margin 20%,0'}, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"   * Preview script requires Ruby
"   * Install Highlight or CodeRay to enable syntax highlighting
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?"
"   key
"   :Ag! - Start fzf in fullscreen and display the preview window above

" プロンプト表示を「コマンド名（検索文字列）> 」みたいにする
function! s:exec_grep_command(arg, is_bang, command_name)
  let tokens = split(a:arg)
  let opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
  let query = join(filter(copy(tokens), 'v:val !~ "^-"'))

  let fzf_options = {'options': ''}
  let cul_dir = ' (' . getcwd() . ') '

  let display_search_str = '> "'
  if !empty(query)
    let display_search_str = '['.query.']> "'
  endif

  let fzf_options.options .= ' --prompt="'.a:command_name. cul_dir. display_search_str

  if a:is_bang
    let fzf_options = fzf#vim#with_preview(fzf_options, 'up:60%')
  else
    let fzf_options = fzf#vim#with_preview(fzf_options, 'right:50%:hidden', '?')
  end

  if a:command_name == 'Ag'
    call fzf#vim#ag(query, opts. ' --path-to-ignore ~/.ignore', fzf_options, a:is_bang)
  else
    call fzf#vim#grep(
          \  'rg --column --line-number --hidden --no-heading --color always --ignore-file ~/.ignore '.shellescape(query),
          \  1,
          \  fzf_options,
          \  a:is_bang)
  endif
endfunction

autocmd VimEnter * command! -bang -nargs=* Ag call s:exec_grep_command(<q-args>, <bang>0, 'Ag')
autocmd VimEnter * command! -bang -nargs=* Rg call s:exec_grep_command(<q-args>, <bang>0, 'Rg')

" command for git grep
" fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

function! s:tags_sink(line)
  let parts = split(a:line, '\t\zs')
  let excmd = matchstr(parts[2:], '^.*\ze;"\t')
  execute 'silent e' parts[1][:-2]
  let [magic, &magic] = [&magic, 0]
  execute excmd
  let &magic = magic
endfunction

function! s:tags(query)
  if empty(tagfiles())
    echohl WarningMsg
    echom 'Preparing tags'
    echohl None
  endif
  " 優先度の高いtagfileだけ使う
  let tagfile = tagfiles()[0]
  " let proc = 'perl -ne ''unless (/^\!/) { s/^(.*?)\t(.*?)\t/'.s:yellow('\1', 'Function').'\t'.s:blue('\2', 'String').'\t/; print }'' '
  let copt = '--ansi '

  if !empty(a:query)
    let query_option = ' --query='.shellescape(a:query)
  else
    let query_option = ''
  endif

  call fzf#run({
  \ 'source':  'cat '.join(map(tagfiles(), 'fnamemodify(v:val, ":S")')).
  \            '| grep -v -a ^!',
  \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index '.
  \            '--prompt="TTags> "'.query_option,
  \ 'down':    '40%',
  \ 'sink':    function('s:tags_sink')})
endfunction
command! -nargs=* TTags call s:tags(<q-args>)

" ------------- 引数の内容を無名レジスタにコピー---------"
function! s:add_latest_register(line)
  let @" = a:line
  echomsg "Add Register!!"
endfunction

command! -nargs=* BacklogIssues call fzf#run({
  \ 'source': 'ruby -S backlog_access.rb myissue',
  \ 'options': '--ansi ',
  \ 'down':    '40%',
  \ 'sink': function('s:add_latest_register')
  \ })

function! s:yank_list()
  redir => ys
  " silent :Yanks
  " redir END
  silent call s:all_yanks()
  redir END
  return split(substitute(ys, '\^M', '\\\\\\n', 'g'), '\n')[1:]
endfunction

function! s:yank_handler(reg)
  if empty(a:reg)
    echo "aborted register paste"
  else
    let token = split(a:reg, ' ')
    execute 'Paste' . token[0]
  endif
endfunction

command! FZFYank call fzf#run({
\ 'source': <sid>yank_list(),
\ 'sink': function('<sid>yank_handler'),
\ 'options': '-m --prompt="FZFYank> " --preview="echo -e {2..}"',
\ 'down':    '40%'
\ })

nnoremap <C-Y><C-Y> :<C-U>FZFYank<CR>
inoremap <C-Y><C-Y> <C-O>:<C-U>FZFYank<CR>

function! s:all_yanks()
  let i = 0
  for msg in EasyClip#Yank#EasyClipGetAllYanks()
    let index = printf("%-4d", i)
    let line = substitute(msg.text, '\V\n', '^M', 'g')
    echohl Directory | echo  index
    echohl None      | echon line
    echohl None
    let i += 1
  endfor
endfunction

