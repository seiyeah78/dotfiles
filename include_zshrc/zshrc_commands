[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function fbacklog() {
  #順番：標準入力、expectのコマンド、取得結果
  local out="$(ruby -S backlog_access.rb myissue | fzf-tmux -d 30% --ansi --no-sort --reverse --print-query --expect=ctrl-s,ctrl-o,ctrl-b,ctrl-y,enter)"

  local q="$(head -1 <<< $out)" #標準入力
  local k="$(head -2 <<< $out | tail -1)" #except指定の文字列
  local str="$(head -3 <<< "$out" | tail -1)" #取得結果
  local issue_num="$(echo $str | cut -d' ' -f1)"

  case "$k" in
    "ctrl-y" | "enter")
        echo $str C
        echo "Copy to ClipBoard!"
        ;;
    "ctrl-s" | "ctrl-o")
        open "${BACKLOG_PROJECT}/view/${issue_num}"
        ;;
    "ctrl-b" )
        local tracking=`git tracking-branch`
        local cmd="git branch feature/${issue_num}"
        if [[ -z "${issue_num}" ]]; then
          return 0;
        fi
        print -z "${cmd} ${tracking}"
        ;;
  esac
}

function fshow() {
  local out sha q k str
  while out=$(
      git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(#b2b2b2)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" --print-query --expect=ctrl-g,ctrl-y,enter); do
      q="$(head -1 <<< $out)" #標準入力
      k="$(head -2 <<< $out | tail -1)" #except指定の文字列
      str="$(head -3 <<< $out | tail -1)" #取得結果
      sha=$(echo "$str" | awk '{print $2}')
    case "$k" in
      "enter")
        git show --color=always $sha | less -R
        ;;
      "ctrl-g" | "ctrl-y")
        echo $sha C
        echo "Copy changeset $sha to ClipBoard!"
        return 0;
        ;;
    esac
  done
}

function repo() {
  #順番：標準入力、expectのコマンド、取得結果
  local out="$(ghq list | fzf --ansi --multi --no-sort --reverse --query="$1" --print-query --exit-0 --expect=ctrl-g,ctrl-o,enter)"

  local q="$(head -1 <<< $out)" #標準入力
  local k="$(head -2 <<< $out | tail -1)" #except指定の文字列
  local str="$(head -3 <<< "$out" | tail -1)" #取得結果

  local target_path=$(ghq root)/$str
  if [ ! -d "${target_path}" ]; then
    return 0;
  fi
  echo $str
  case "$k" in
    "enter")
      cd $target_path
        ;;
    "ctrl-g" | "ctrl-o")
      zsh -c "cd ${target_path} && hub browse"
        ;;
  esac
}
## history incremental search peco ###
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER" --prompt "HISTORY>")
    CURSOR=$#BUFFER
    zle clear-screen
    #zle accept-line
}

ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

fdocker-images() {
    local out="$(docker images| sed -e '1d' | fzf-tmux -d 30% --ansi --exact --multi --no-sort --reverse --query=$1 --print-query --bind alt-a:select-all,alt-d:deselect-all --expect=ctrl-d,ctrl-b,ctrl-r,enter)"

    local q="$(head -1 <<< $out)" #標準入力
    local k="$(head -2 <<< $out | tail -1)" #except指定の文字列
    local str="$(sed 1,2d <<< $out)" #取得結果
    local container_ids=($(echo $str | awk '{print $3}' | xargs))
    case "$k" in
      "ctrl-b" | "enter")
        echo $container_ids
        print -z "docker run --rm -it ${container_ids[1]} /bin/bash"
        ;;
      "ctrl-d" | "ctrl-r")
        print -z " docker rmi --force ${container_ids}"
        ;;
    esac
}

function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_vscode_terminal() { [[ $TERM_PROGRAM = "vscode" ]]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

function tmux_attach_session()
{
    if is_screen_or_tmux_running; then
        ! is_exists 'tmux' && return 1

        if is_tmux_runnning; then
            #echo "${fg_bold[red]} _____ __  __ _   ___  __ ${reset_color}"
            #echo "${fg_bold[red]}|_   _|  \/  | | | \ \/ / ${reset_color}"
            #echo "${fg_bold[red]}  | | | |\/| | | | |\  /  ${reset_color}"
            #echo "${fg_bold[red]}  | | | |  | | |_| |/  \  ${reset_color}"
            #echo "${fg_bold[red]}  |_| |_|  |_|\___//_/\_\ ${reset_color}"
        elif is_screen_running; then
            echo "This is on screen."
        fi
    else
        if shell_has_started_interactively && ! is_ssh_running && ! is_vscode_terminal; then
            if ! is_exists 'git'; then
                echo 'Error: tmux command not found' 2>&1
                return 1
            fi

            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | wc -l | xargs; then
                # detached session exists
                tmux list-sessions
                echo -n "Tmux: attach? (y/N/num/string) "
                read
                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    tmux attach-session
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[a-zA-Z]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                fi
            fi

            if is_osx && is_exists 'reattach-to-user-namespace'; then
                # on OS X force tmux's default command
                # to spawn a shell in the user's namespace
                tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
                tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
            else
                tmux new-session && echo "tmux created new session"
            fi
        fi
    fi
}

tmux_attach_session

function rgl()
{
     rg --no-ignore --hidden --follow --no-messages -p "$@" | less -RSX
}

# docker command
function docker-taglist() {
  if [ -z $1 ]; then
    echo "input docker tag name. e.g. ${funcstack[1]} centos."
    return 0;
  fi
  curl -s https://registry.hub.docker.com/v1/repositories/$1/tags | jq ".[].name"
}

function mktouch() {
  if [ -z $1 ]; then
    echo "input file name. e.g. ${funcstack[1]} ~/foo/bar/buzz.txt"
    return 0;
  fi

  local dir=$(dirname $1)
  mkdir -p $dir  && touch $1
  if [ $? == 0 ]; then
    echo "Created file"
    ls -l $1
  fi
}


function gen_ctags () {
  local dir=".git/"

  if [ ! -e ".git" ]; then
    dir="./"
  fi

  ctags --tag-relative=yes --recurse --sort=yes --extras=+q -R -f ${dir}tags
}

function servers {
  local profile=${1:=dev/developer}
  local out=$(aws ec2 describe-instances --profile $profile --region ap-northeast-1 | \
    jq -r '.[][].Instances[] | [.InstanceId, [.Tags[] | select(.Key == "Name").Value][], .InstanceType, .NetworkInterfaces[].PrivateIpAddress, .State.Name] | @tsv' |\
    column -t |\
    fzf-tmux --ansi --exact --no-sort --reverse --print-query --expect=ctrl-s,enter --prompt="Servers (${profile}) CMD { enter:ssh, ctrl-s:ssm start-session } > " )

  local q="$(head -1 <<< $out)" #標準入力
  local k="$(head -2 <<< $out | tail -1)" #except指定の文字列
  local result=($(sed 1,2d <<< $out)) #取得結果(配列)

  case "$k" in
    "enter")
      print -z "ssh ${result[4]}"
      ;;
    "ctrl-s")
      print -z aws ssm start-session --target ${result[1]} --profile $profile
      ;;
  esac
}

function kube_current_images() {
  kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' | sort | grep ${1:=" "} --color=auto
}

# e.g
# openpr (no args)         => open current branch pull-request.
# openpr number (e.g. 123) => open pull-request using hub. (e.g. pull/123 )
# openpr hash              => check the following in order
#                            1. squash merge commit itself
#                            2. merge pull request commit itself
#                            3. find merge commit from hash

function openpr() {
  local git_hash=$1

  # no arg => open current branch pr
  if [ -z "${git_hash}" ]; then
    local num=$(hub pr list -f %I -h $(git rev-parse --abbrev-ref HEAD))
    if [ -z "${num}" ]; then
      echo "Not been created pull request for current branch."
    else
      hub browse -- pull/${num}
    fi
    return 0;
  fi

  # only number => open pull/num
  if [[ ${git_hash} =~ ^[0-9]+$  ]] && [ ${#git_hash} -lt 7 ]; then
    hub browse -- pull/${git_hash}
    return 0;
  fi

  # open pr from squash merge
  local result=$(git log -1 $git_hash --oneline)
  local num=$(echo ${result##*' '} | sed -e 's/(#\(.*\))/\1/')
  if [[ ! -z "${num}" && ${num} =~ ^[0-9]+$ ]]; then
    echo "Created by Squash merge."
    hub browse -- pull/${num}
    return 0;
  fi

  # merge pull request commit hash itself
  local details=$(git show --oneline --merges $git_hash 2>/dev/null)
  if [ ! -z "${details}" ]; then
    _open_pull_request_from_commit_details "$details"
    return 0;
  fi

  # commit hash => find open pr included it.
  local default_branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d/ -f2)
  local details=$(git log --merges --oneline --reverse --ancestry-path $git_hash...$default_branch 2>/dev/null)
  _open_pull_request_from_commit_details $details

  if [ $? != 0  ]; then
    echo "Not found pull request."
  fi

}

function _open_pull_request_from_commit_details() {
  local num=$(echo $1 | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%%')
  if ! [ -z "${num}" ]; then
    hub browse -- pull/$num
    return 0;
  else
    return 1;
  fi
}
